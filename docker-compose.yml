version: '3.8'

services:
    db:
        container_name: cs-db
        image: postgres:15.3-alpine3.18
        volumes:
            - pgdata:/var/lib/postgresql/data
        environment:
            - POSTGRES_DB=${POSTGRES_NAME}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_HOST=${POSTGRES_HOST}
        ports:
            - "${POSTGRES_PORT}:5432"
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    app:
        container_name: cs-app
        build: .
        restart: always
        command: python manage.py runserver 0.0.0.0:8000
        volumes:
            - .:/code
        ports:
            - "8000:8000"
        environment:
            - POSTGRES_NAME=${POSTGRES_NAME}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - CELERY_BACKEND=${CELERY_BACKEND}
            - CELERY_BROKER=${CELERY_BROKER}
        depends_on:
            - db
            - redis
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    redis:
        container_name: cs-redis
        image: "redis/redis-stack-server:latest"
        volumes:
            - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
        ports:
            - "6378:6379"
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    celery:
        container_name: cs-celery
        build: .
        command: celery -A core worker -l INFO
        volumes:
            - .:/code
        environment:
            - DEBUG=1
            - DJANGO_ALLOWED_HOSTS=*
            - CELERY_BROKER=${CELERY_BROKER}
            - CELERY_BACKEND=${CELERY_BACKEND}
        depends_on:
            - app
            - redis
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    celery-beat:
        container_name: cs-celery-beat
        build: .
        command: celery -A core beat -l INFO
        volumes:
            - .:/code
        environment:
            - DEBUG=1
            - DJANGO_ALLOWED_HOSTS=*
            - CELERY_BROKER=${CELERY_BROKER}
            - CELERY_BACKEND=${CELERY_BACKEND}
        depends_on:
            - app
            - redis
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    correlations:
        container_name: cs-correlations
        build: .
        command: python manage.py incremental_correlations
        volumes:
            - .:/code
        depends_on:
            - db
            - redis
        healthcheck:
            test: ["CMD-SHELL", "pgrep -f incremental_correlations || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    zscore:
        container_name: cs-zscore
        build: .
        command: python manage.py incremental_zscore
        volumes:
            - .:/code
        environment:
            - POSTGRES_NAME=${POSTGRES_NAME}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        depends_on:
            - db
            - redis
        healthcheck:
            test: ["CMD-SHELL", "pgrep -f incremental_zscore || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    exchange-connections:
        container_name: cs-exchange-connections
        build: .
        command: python manage.py klines
        volumes:
            - .:/code
        environment:
            - POSTGRES_NAME=${POSTGRES_NAME}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        depends_on:
            - db
            - redis
        healthcheck:
            test: ["CMD-SHELL", "pgrep -f klines || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

volumes:
    pgdata:
