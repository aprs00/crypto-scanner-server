services:
    db:
        container_name: crypto-scanner-db
        image: postgres:15.3-alpine3.18
        volumes:
            - ./data/db:/var/lib/postgresql/data
        environment:
            - POSTGRES_DB=${POSTGRES_NAME}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_HOST=${POSTGRES_HOST}
        ports:
            - "${POSTGRES_PORT}:5432"

    app:
        container_name: crypto-scanner-app
        build: .
        restart: always
        command: python manage.py runserver 0.0.0.0:8000
        volumes:
            - .:/code
        ports:
             - "8000:8000"
        environment:
            - POSTGRES_NAME=${POSTGRES_NAME}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - CELERY_BACKEND=${CELERY_BACKEND}
            - CELERY_BROKER=${CELERY_BROKER}
        depends_on:
            - db
            - redis

    # binance_websocket:
    #     container_name: crypto-scanner-binance-websocket
    #     build: .
    #     command: python binance_websocket.py
    #     volumes:
    #         - .:/code
    #     environment:
    #         - POSTGRES_NAME=${POSTGRES_NAME}
    #         - POSTGRES_USER=${POSTGRES_USER}
    #         - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #         - CELERY_BACKEND=${CELERY_BACKEND}
    #         - CELERY_BROKER=${CELERY_BROKER}
    #     depends_on:
    #         - db
            # - redis

    redis:
        container_name: crypto-scanner-redis
        image: "redis:7.2-rc2-alpine"
        volumes:
            - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

    celery:
        container_name: crypto-scanner-celery
        build: .
        command: celery -A core worker -l INFO
        volumes:
            - .:/code
        environment:
            - DEBUG=1
            - DJANGO_ALLOWED_HOSTS=*
            - CELERY_BROKER=${CELERY_BROKER}
            - CELERY_BACKEND=${CELERY_BACKEND}
        depends_on:
            - app
            - redis

    celery-beat:
        container_name: crypto-scanner-celery-beat
        build: .
        command: celery -A core beat -l INFO
        volumes:
            - .:/code
        environment:
            - DEBUG=1
            - DJANGO_ALLOWED_HOSTS=*
            - CELERY_BROKER=${CELERY_BROKER}
            - CELERY_BACKEND=${CELERY_BACKEND}
        depends_on:
            - app
            - redis
